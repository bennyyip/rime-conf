patch:
  ascii_composer:
    switch_key: { Shift_R: commit_code }
  schema_list:
    - schema: double_pinyin_flypy
    # - schema: jyut6ping3_ipa
    # - schema: ipa_xsampa
    # - schema: japanese
    # - schema: rime_ice
  punctuator:
    full_shape:
      __include: punctuation:/full_shape
    half_shape:
      __include: punctuation:/half_shape
  key_binder:
    # Lua 配置: 以词定字（上屏当前词句的第一个或最后一个字），和中括号翻页有冲突
    select_first_character: 'semicolon' # 分号 ;
    select_last_character: 'apostrophe' # 撇号 '

  bindings:
    # Tab / Shift+Tab 切换光标至下/上一个拼音
    - { when: composing, accept: Shift+Tab, send: Shift+Left }
    - { when: composing, accept: Tab, send: Shift+Right }

    # Option/Alt + ←/→ 切换光标至下/上一个拼音
    - { when: composing, accept: Alt+Left, send: Shift+Left }
    - { when: composing, accept: Alt+Right, send: Shift+Right }

    # 翻页 - =
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }

    - { accept: Return, send: commit_code, when: composing }

    - { accept: Control+Shift+1, select: .next, when: always }
    - { accept: Control+Shift+2, toggle: ascii_mode, when: always }
    - { accept: Control+Shift+3, toggle: traditionalization, when: always }
    - { accept: Control+Shift+4, toggle: emoji_suggestion, when: always }
    - { accept: Control+Shift+5, toggle: full_shape, when: always }
    - { accept: Control+Shift+6, toggle: extended_charset, when: always }
    - { accept: Control+Shift+exclam, select: .next, when: always }
    - { accept: Control+Shift+at, toggle: ascii_mode, when: always }
    - { accept: Control+Shift+numbersign, toggle: traditionalization, when: always }
    - { accept: Control+Shift+dollar, toggle: emoji_suggestion, when: always }
    - { accept: Control+Shift+percent, toggle: full_shape, when: always }
    - { accept: Control+Shift+asciicircum, toggle: extended_charset, when: always }

    # emacs_editing:
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+u, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
